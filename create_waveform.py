import osimport waveimport matplotlib.pyplot as pltfrom scipy.io import wavfileimport numpy as np# Определение границ амплитуды для создания графикаdef get_max_min_from_wav(file_path, start_index, end_offset):    # Открытие WAV файла    with wave.open(file_path, 'r') as wav_file:        # Считывание параметров аудиофайла        nchannels, sampwidth, framerate, nframes, comptype, compname = wav_file.getparams()                # Получение общего числа фреймов в файле        nframes = wav_file.getnframes()                # Вычисление конечного индекса как общее количество фреймов минус смещение        end_index = nframes - end_offset               # Переход к нужному фрагменту        wav_file.setpos(start_index)        # Считывание данных из файла в заданном диапазоне        frames = wav_file.readframes(end_index - start_index)                # Преобразование бинарных данных в массив numpy        data = np.frombuffer(frames, dtype=np.int16)                # Для моно        min_val = data.min()        max_val = data.max()        return (min_val, max_val)def create_waveform(directory, output_directory):    if not os.path.exists(output_directory):        os.makedirs(output_directory)    # Проходим по всем файлам в директории    for filename in os.listdir(directory):        if filename.endswith(".wav"):            # Чтение файла            filepath = os.path.join(directory, filename)            samplerate, data = wavfile.read(filepath)                        # Создание осциллограммы            plt.figure(figsize=(10, 4))            plt.plot(data)            plt.title("Waveform of " + filename)            plt.ylabel("Amplitude")            plt.xlabel("Samples")            plt.xlim([0, len(data)])            plt.ylim(get_max_min_from_wav(filepath, 1000, 1000))  # предполагается 16-битное аудио            plt.grid(True)            # Сохранение осциллограммы в заданной директории            output_filepath = os.path.join(output_directory, os.path.splitext(filename)[0] + '_waveform.png')            plt.savefig(output_filepath)            plt.close()# Использование функцииcreate_waveform('/Users/aleksejzubel/Documents/work/преобразование данных гироскопа от колонок в аудиофайл /honor50_gyro_samples_speakers/python/3',                '/Users/aleksejzubel/Documents/work/преобразование данных гироскопа от колонок в аудиофайл /honor50_gyro_samples_speakers_waveform/python/3')